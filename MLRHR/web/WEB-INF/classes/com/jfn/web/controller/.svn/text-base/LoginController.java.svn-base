package com.jfn.web.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springside.modules.security.springsecurity.SpringSecurityUtils;
import org.springside.modules.utils.MailTemplate;

import com.google.gson.JsonObject;
import com.jfn.entity.LoginUser;
import com.jfn.entity.User;
import com.jfn.entity.UserBaseInfor;
import com.jfn.service.AccountManager;
import com.jfn.service.BodyService;
import com.jfn.service.EmailCenter;
import com.jfn.service.LoginService;
import com.jfn.service.NewsService;
import com.jfn.service.UserBaseInforService;
import com.jfn.service.UserService;

@Controller
@RequestMapping("/")
public class LoginController {

	public Log log = LogFactory.getLog(LoginController.class);
	@Autowired
	private LoginService service;
	@Autowired
	private AccountManager accountManager;
	@Autowired
	private BodyService bservice;
	@Autowired
	private UserService uservice;
	@Autowired
	private UserBaseInforService userbaseinforservice;
	@Autowired
	private EmailCenter emailCenter;
	@Autowired
	private NewsService newsservice;

	@RequestMapping(value = "getpassword", method = RequestMethod.GET)
	public String getPassword() {
		return "system/getpassword";
	}

	@RequestMapping(value = "sendGetPasswordMail", method = RequestMethod.POST)
	@ResponseBody
	public Object sendGetPasswordMail(HttpServletRequest request, HttpSession session) {
		String userName = request.getParameter("username");
		String email = request.getParameter("email");
		int result = 1;
		String msg = "";
		JsonObject jsonResponse = new JsonObject();
		if (userName != null && userName != "" && email != null && email != "") {
			List<String> list = service.checkGetPWD(email, userName);
			if (list != null && list.size() > 0) {
				result = 1;
				msg = "验证成功！已向您的邮箱" + list.get(0).toString() + "发送一封邮件";
				int newPassword = (int) (Math.random() * 999999 + 100000);
				// 随机生成密码， 并且发到用户的注册邮件中。
				service.changepwd(userName, String.valueOf(newPassword));
				emailCenter.send(list.get(0).toString(), MailTemplate.MAIL_GET_PWD_SUBJECT, MailTemplate.MAIL_GET_PWD_BODY + newPassword);
				session.setAttribute("current_login_name", userName);
			} else {
				result = 2;
				msg = "验证失败！输入的用户名或身份证信息错误！";
			}
		} else {
			result = 0;
			msg = "输入的值不得有空值";
		}
		jsonResponse.addProperty("msg", msg);
		jsonResponse.addProperty("result", result);
		return jsonResponse.toString();
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home() {
		return "redirect:/login";
	}

	// 登陆后过渡页面，仅为member身份的用户可以去修改member信息
	@RequestMapping(value = "/logon", method = RequestMethod.GET)
	public String logon(HttpServletRequest request, Model model) {
		User user = accountManager.findUserByLoginName(SpringSecurityUtils.getCurrentUserName());
		request.getSession().setAttribute("loginuser", user);
		if (user != null) {
			return "redirect:/index";
			// return "logon";
		}
		return "loginError";
	}

	@RequestMapping(value = "login", method = RequestMethod.GET)
	public String login(HttpServletRequest request, String p, Model model) {
		HttpSession session = request.getSession();
		// 如果已经登陆就直接跳转到home
		if (session.getAttribute("loginuser") != null) {
			return "redirect:/index";
		}
		if ((p != null) && (p.length() > 0)) {
			model.addAttribute("lastPage", p);
		}
		return "login";
	}

	@RequestMapping(value = "register", method = RequestMethod.GET)
	public String register(HttpServletRequest request, String p, Model model) {
		model.addAttribute("bodyList", bservice.getAll());
		return "register";
	}

	@RequestMapping(value = "registersave", method = RequestMethod.POST)
	@ResponseBody
	public String registerSave(HttpServletRequest request, Model model) {
		JsonObject jsonResponse = new JsonObject();
		int result = 0;// 0:fail;1:success
		String msg = "";

		String j_username = request.getParameter("j_username");
		String j_idnum = request.getParameter("j_idnum");
		String j_body = request.getParameter("j_body");
		String j_email = request.getParameter("j_email");
		String j_password = request.getParameter("j_password");

		if (!uservice.checkUsernameExists(j_idnum)) {
			result = 2;
		} else {
			result = uservice.regUser(j_username, j_idnum, j_email, j_body, j_password) ? 1 : 0;
			if (result == 1) {
				User userobj = uservice.getUserIdByLoginName(j_idnum);
				uservice.setRight(userobj.getId(), "普通职工");

				UserBaseInfor userbaseinfor = new UserBaseInfor();
				userbaseinfor.setUser_id(userobj.getId());
				userbaseinfor.setGender("男");
				userbaseinforservice.userBaseInforInsert(userbaseinfor);
			}
		}
		jsonResponse.addProperty("result", result);
		jsonResponse.addProperty("msg", msg);
		return jsonResponse.toString();
	}

	@RequestMapping(value = "loginError", method = RequestMethod.GET)
	public String loginError(HttpServletRequest request, Model model) {
		HttpSession session = request.getSession();

		// 如果已经登陆就直接跳转到contacterlist
		if (session.getAttribute("loginuser") != null) {
			return "redirect:/index";
		}
		model.addAttribute("msg", "Invalid username or password");
		return "login";
	}

	@RequestMapping(value = "login", method = RequestMethod.POST)
	public String login(HttpServletRequest request, RedirectAttributes redirectAttributes) {
		String strEmail = request.getParameter("email");
		String strPassword = request.getParameter("login_pwd");
		String lastPage = request.getParameter("lastPage");

		List<LoginUser> logins = service.login(strEmail, strPassword);
		if (logins.size() > 0) {
			request.getSession().setAttribute("loginuser", logins.get(0));

			if ((lastPage != null) && (lastPage.length() > 0)) {
				return "redirect:" + lastPage;
			}
			return "redirect:/index";
		}

		return "redirect:/loginError";
	}

	@RequestMapping(value = "logout", method = RequestMethod.GET)
	public String logout(HttpServletRequest request) {
		// request.getSession().invalidate();
		request.getSession().setAttribute("loginuser", null);
		return "redirect:/login";
	}

	@RequestMapping(value = "changepassword", method = RequestMethod.GET)
	public String ChangePassword(HttpServletRequest request) {
		return "personalCenter/changepassword";
	}

	@RequestMapping(value = "changepwd", method = RequestMethod.POST)
	@ResponseBody
	public String ChangePwd(HttpServletRequest request, Model model) {
		JsonObject jsonResponse = new JsonObject();
		int result = 0;// 0:fail;1:success
		String msg = "";
		User user = accountManager.findUserByLoginName(SpringSecurityUtils.getCurrentUserName());
		if (user != null) {
			String login_user = user.getLoginName();
			String strNewPassword = request.getParameter("newPassword");
			String strOldPassword = request.getParameter("oldPassword");
			if (service.check(login_user, strOldPassword)) {
				if (service.changepwd(login_user, strNewPassword)) {
					result = 1;
					msg = "密码修改成功，请重新登录！";
				} else {
					result = 0;
					msg = "密码修改失败，请重试！";
				}
			} else {
				result = 0;
				msg = "当前密码输入错误，请重试！";
			}
		}
		jsonResponse.addProperty("result", result);
		jsonResponse.addProperty("msg", msg);
		return jsonResponse.toString();
	}

	@RequestMapping(value = "index", method = RequestMethod.GET)
	public String index(HttpServletRequest request, Model model) {
		User user = accountManager.findUserByLoginName(SpringSecurityUtils.getCurrentUserName());

		// get top 3 news
		model.addAttribute("topnews", newsservice.getAllTop());

		return "index";
	}

}
